---
- name: Run TPCC test
  hosts: "{{ test_hosts | default('crdb_client') }}"
  gather_facts: yes
  any_errors_fatal: true

  vars:
    workload: tpcc
    run_options: "--ramp=60s --partitions={{ crdb_rack_count }} --tolerate-errors"
    bench_run_file: tpcc-run
    bench_run_template: tpcc-run.sh.j2
    connection_url:

  vars_prompt:
    - name: warehouses
      private: no
      prompt: "Number of warehouses"

    - name: run_duration
      private: no
      prompt: "Test duration in seconds"

  tasks:
    - name: Set SSL mode
      set_fact:
        ssl_mode: "{{ crdb_ssl_mode_secure if (crdb_ssl | bool) else crdb_ssl_mode_disable }}"

    - name: Print SSL mode
      debug:
        var: ssl_mode

    - name: Set direct connection to CRDB servers (LB none)
      set_fact:
        crdb_servers: "{{ hostvars['localhost']['groups']['crdb'] }}"
      when: crdb_lb == 'none'

    - name: Set haproxy connection to CRDB servers (LB haproxy)
      set_fact:
        crdb_servers: "{{ hostvars['localhost']['groups']['crdb_haproxy'] }}"
      when: crdb_lb == 'haproxy'

    - name: Set other LB IP to CRDB servers (LB other)
      set_fact:
        crdb_servers: "{{ [crdb_lb_other_ip] }}"
      when: crdb_lb == 'other'
   
    - name: Print connection target
      debug:
        var: crdb_servers

    - name: Build connection URL
      set_fact:
        connection_url: "{{ connection_url }} \"postgres://root@{{ item }}:{{ crdb_db_port }}?sslmode={{ ssl_mode }}\""
      with_items: "{{ crdb_servers }}"

    - name: Trim connection URL
      set_fact:
        connection_url: "{{ connection_url | trim }}"

    - name: Print connection URL
      debug:
        var: connection_url

    - name: Get current timestamp
      set_fact:
        test_datetime: "{{ ansible_date_time.epoch }}"

    - name: Create output files
      set_fact:
        test_folder: "{{ test_datetime }}"
        test_run_file: "{{ bench_run_file }}-{{ workload }}-{{ warehouses }}-{{ run_duration }}.sh"
        test_run_histogram: "{{ bench_run_file }}-{{ workload }}-{{ warehouses }}-{{ run_duration }}.histogram.ndjson"
        test_run_log: "{{ bench_run_file }}-{{ workload }}-{{ warehouses }}-{{ run_duration }}-{{ inventory_hostname }}.log"

    - name: Ensures dir exists
      file:
        path: "{{ test_datetime }}"
        state: directory
        mode: 0775
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: create run script
      template:
        src: "{{ bench_run_template }}"
        dest: "{{ test_datetime }}/{{ test_run_file }}"
        mode: 0775
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      vars:
        client: crdb_servers

    - name: Workload run
      shell: "cd {{ test_datetime }}; ./{{ test_run_file }}"

    - name: Retrieve run file
      fetch:
        src: "{{ test_datetime }}/{{ test_run_file }}"
        dest: "{{ result_folder }}/{{ test_folder }}/scripts/{{ inventory_hostname }}-{{ test_run_file }}"
        flat: yes

    - name: Retrieve run log
      fetch:
        src: "{{ test_datetime }}/{{ test_run_log }}"
        dest: "{{ result_folder }}/{{ test_folder }}/"
        flat: yes

    - name: Retrieve histogram
      fetch:
        src: "{{ test_datetime }}/{{ test_run_histogram }}"
        dest: "{{ result_folder }}/{{ test_folder }}/"
        flat: yes
